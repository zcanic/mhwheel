// controller.js - 分享控制器（<200行）
// 职责：绑定按钮 -> 调用 ShareImageGenerator -> 多层降级(剪贴板/原生分享/下载) -> UI 提示
import { ShareImageGenerator } from './imageGenerator.js';

export class ShareController {
  constructor(){ this.generator=new ShareImageGenerator(); this.imageGenerator=this.generator; this.isSharing=false; this.shareButton=null; this.initialized=false; }
  init(getAppState){ if(this.initialized) return; this.getAppState=getAppState; this.shareButton=document.getElementById('shareResultsBtn'); if(this.shareButton){ this._bound=()=>this.handleShare(); this.shareButton.addEventListener('click',this._bound); } this.initialized=true; this.updateUI(getAppState()); }
  getState(){ return this.getAppState ? this.getAppState() : null; }
  updateUI(state){ if(!this.shareButton) return; const hasResults=state.multiplayer.players.some(p=>p.weapon); this.shareButton.disabled=this.isSharing||!hasResults||state.multiplayer.isAssigning; this.shareButton.classList.toggle('loading',this.isSharing); }
  async handleShare(){ if(!this.getAppState) return; const s=this.getAppState(); const players=s.multiplayer.players.filter(p=>p.weapon); if(players.length===0){ this._toast('请先分配武器再分享','error'); return; } await this.share({ players, teamChallenge: s.multiplayer.teamChallenge }); }
  async share(data){ if(this.isSharing) return false; this.isSharing=true; this.updateUI(this.getAppState()); try { const blob=await this.generator.generateMultiplayerShareImage(data); if(await this._clipboard(blob)){ this._toast('已复制到剪贴板，快去粘贴吧！','success'); return true; } if(await this._native(blob)){ this._toast('已调用系统分享','success'); return true; } await this._download(blob); this._toast('已保存图片（剪贴板不可用）','info'); return true; } catch(e){ console.error(e); this._toast('分享失败，请尝试截图','error'); return false; } finally { this.isSharing=false; this.updateUI(this.getAppState()); } }
  async _clipboard(blob){ try { if(!navigator.clipboard||typeof ClipboardItem==='undefined'||!window.isSecureContext) return false; await navigator.clipboard.write([new ClipboardItem({[blob.type]:blob})]); return true; } catch{ return false; } }
  async _native(blob){ try { if(!navigator.share) return false; const file=new File([blob],`猎人小队-${Date.now()}.png`,{ type:'image/png' }); if(navigator.canShare && navigator.canShare({ files:[file] })){ await navigator.share({ files:[file], title:'猎人小队武器分配', text:'我们的猎人武器配置' }); return true; } return false; } catch { return false; } }
  async _download(blob){ const url=URL.createObjectURL(blob); const a=document.createElement('a'); a.href=url; a.download=`猎人小队-${new Date().toISOString().split('T')[0]}.png`; document.body.appendChild(a); a.click(); document.body.removeChild(a); setTimeout(()=>URL.revokeObjectURL(url),200); }
  _toast(message,type='info'){ const el=document.createElement('div'); el.textContent=message; const color=type==='success'? '#16a34a': type==='error'? '#dc2626': '#475569'; Object.assign(el.style,{ position:'fixed', top:'24px', left:'50%', transform:'translateX(-50%) translateY(-8px)', background:color, color:'#fff', padding:'10px 18px', borderRadius:'10px', fontSize:'14px', fontWeight:'500', fontFamily:'"Noto Sans SC", sans-serif', zIndex:9999, opacity:'0', transition:'all .35s cubic-bezier(.4,.8,.2,1)'}); document.body.appendChild(el); requestAnimationFrame(()=>{ el.style.opacity='1'; el.style.transform='translateX(-50%) translateY(0)'; }); setTimeout(()=>{ el.style.opacity='0'; el.style.transform='translateX(-50%) translateY(-8px)'; setTimeout(()=>el.remove(),350); },3400); }
  destroy(){ if(this.shareButton) this.shareButton.removeEventListener('click',this._bound); }
}
